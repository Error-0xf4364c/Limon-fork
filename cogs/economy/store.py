import discord
from discord import Embed
from discord.ui import View, Button, Select
from discord import app_commands
from discord.ext import commands
import datetime
import asyncio
from main import MyBot
import yaml
from yaml import Loader


# ALL ITEMS FILE
items_file = open("assets/yamls/items.yml", "rb")
items = yaml.load(items_file, Loader = Loader) 


# MINING ITEMS 
pickaxes = items["pickaxe"]

# Stone Pickaxe
stonePickaxe = pickaxes["stonepickaxe"]
stonePickaxeName = stonePickaxe["name"] # Pickaxe Name
stonePickaxePrice = stonePickaxe["price"] # Pickaxe Price

# Steel Pickaxe
steelPickaxe = pickaxes["steelpickaxe"]
steelPickaxeName = steelPickaxe["name"] # Pickaxe Name
steelPickaxePrice = steelPickaxe["price"] # Pickaxe Price

# Gold Pickaxe
goldenPickaxe = pickaxes["goldenpickaxe"]
goldenPickaxeName = goldenPickaxe["name"] # Pickaxe Name
goldenPickaxePrice = goldenPickaxe["price"] # Pickaxe Price

# Reinforced Pickaxe
reinforcedPickaxe = pickaxes["reinforcedpickaxe"]
reinforcedPickaxeName = reinforcedPickaxe["name"] # Pickaxe Name
reinforcedPickaxePrice = reinforcedPickaxe["price"] # Pickaxe Price

# Mining Vehicle
miningVehicle = pickaxes["miningvehicle"]
miningVehicleName = miningVehicle["name"] # Pickaxe Name
miningVehiclePrice = miningVehicle["price"] # Pickaxe Price



# FISHING ITEMS
rods = items["fishingrod"]

# Simple Rod
simpleRod = rods["simplerod"]
simpleRodName = simpleRod["name"] # Rod Name
simpleRodPrice = simpleRod["price"] # Rod Price

# Solid Rod
solidRod = rods["solidrod"]
solidRodName = solidRod["name"] # Rod Name
solidRodPrice = solidRod["price"] # Rod Price

# Silver Rod
silverRod = rods["silverrod"]
silverRodName = silverRod["name"] # Rod Name
silverRodPrice = silverRod["price"] # Rod Price

# Lucky Rod
luckyRod = rods["luckyrod"]
luckyRodName = luckyRod["name"] # Rod Name
luckyRodPrice = luckyRod["price"] # Rod Price

# Harpoon
harpoon = rods["harpoon"]
harpoonName = harpoon["name"] # Harpoon Name
harpoonPrice = harpoon["price"] # Harpoon Price


# HUNTING ITEMS

bows = items["bow"]

# Wooden Bow
woodenBow = bows["woodenbow"]
woodenBowName = woodenBow["name"] # Wooden Bow Name
woodenBowPrice = woodenBow["price"] # Wooden Bow Price

# Copper Bow
copperBow = bows["copperbow"]
copperBowName = copperBow["name"] # Copper Bow Name
copperBowPrice = copperBow["price"] # Copper Bow Price

# Silver Bow
silverBow = bows["silverbow"]
silverBowName = silverBow["name"] # Silver Bow Name
silverBowPrice = silverBow["price"] # Silver Bow Price

# Accurate Bow
accurateBow = bows["accuratebow"]
accurateBowName = accurateBow["name"] # Accurate Bow Name
accurateBowPrice = accurateBow["price"] # Accurate Bow Price

# Crossbow
crossbow = bows["crossbow"]
crossbowName = crossbow["name"] # Crossbow Name
crossbowPrice = crossbow["price"] # Crossbow Price

# FORESTRY ITEMS
axes = items["axe"]

# Stone Axe
stoneAxe = axes["stoneaxe"]
stoneAxeName = stoneAxe["name"] # Stone Axe Name
stoneAxePrice = stoneAxe["price"] # Stone Axe Price

# Steel Axe
steelAxe = axes["steelaxe"]
steelAxeName = steelAxe["name"] # Steel Axe Name
steelAxePrice = steelAxe["price"] # Steel Axe Price

# Golden Axe
goldenAxe = axes["goldenaxe"]
goldenAxeName = goldenAxe["name"] # Golden Axe Name
goldenAxePrice = goldenAxe["price"] # Golden Axe Price

# Reinforced Axe
reinforcedAxe = axes["reinforcedaxe"]
reinforcedAxeName = reinforcedAxe["name"] # Reinforced Axe Name
reinforcedAxePrice = reinforcedAxe["price"] # Reinforced Axe Price

# Enchanted Axe
enchantedAxe = axes["enchantedaxe"]
enchantedAxeName = enchantedAxe["name"] # Enchanted Axe Name
enchantedAxePrice = enchantedAxe["price"] # Enchanted Axe Price

# SWORDS
swords = items["sword"]

# 
gladius = swords["gladius"]
gladiusName = gladius["name"]
gladiusPrice = gladius["price"] 
gladiusDcPrice = gladius["discounted_price"]

# 
chukuto = swords["chokuto"]
chukutoName = chukuto["name"]
chukutoPrice = chukuto["price"] 
chukutoDcPrice = chukuto["discounted_price"]

# 
katana = swords["katana"]
katanaName = katana["name"]
katanaPrice = katana["price"] 
katanaDcPrice = katana["discounted_price"]

# 
rapier = swords["rapier"]
rapierName = rapier["name"]
rapierPrice = rapier["price"] 
rapierDcPrice = rapier["discounted_price"]

# 
odachi = swords["odachi"]
odachiName = odachi["name"]
odachiPrice = odachi["price"] 
odachiDcPrice = odachi["discounted_price"]

# 
claymore = swords["claymore"]
claymoreName = claymore["name"]
claymorePrice = claymore["price"] 
claymoreDcPrice = claymore["discounted_price"]



# FOR DB CONNECTION
client = MyBot()



class Pickaxes(discord.ui.Select):
    def __init__(self):

        options = [
            discord.SelectOption(label='Maden Aracƒ±', value= "miningvehicle", description=f'√úcret: {miningVehiclePrice:,}', emoji='‚õèÔ∏è'),
            discord.SelectOption(label='G√º√ßlendirilmi≈ü Kazma', value= "reinforcedpickaxe", description=f'√úcret: {reinforcedPickaxePrice:,}', emoji='‚õèÔ∏è'),
            discord.SelectOption(label='Altƒ±n Kazma', value= "goldenpickaxe", description=f'√úcret: {goldenPickaxePrice:,}', emoji='‚õèÔ∏è'),
            discord.SelectOption(label='√áelik Kazma', value= "steelpickaxe", description=f'√úcret: {steelPickaxePrice:,}', emoji='‚õèÔ∏è'),
            discord.SelectOption(label='Ta≈ü Kazma', value= "stonepickaxe", description=f'√úcret: {stonePickaxePrice:,}', emoji='‚õèÔ∏è'),
            
            
            discord.SelectOption(label='Kazmayƒ± Sat', value= "sellpickaxe", description=f'Kazmanƒ± sat ve yenisini satƒ±n al', emoji='üóëÔ∏è')
        ]
        super().__init__(placeholder='Bir Kazma Se√ß', options=options)

    async def callback(self, interaction: discord.Interaction):
        
        pickaxeName = ""
        pickaxePrice = 0
        pickaxeId = ""
        
        if self.values[0] == "stonepickaxe":
            pickaxeName = "Ta≈ü Kazma"
            pickaxePrice = stonePickaxePrice
            pickaxeId = "stonepickaxe"
        elif self.values[0] == "steelpickaxe":
            pickaxeName = "√áelik Kazma"
            pickaxePrice = steelPickaxePrice
            pickaxeId = "steelpickaxe"
        elif self.values[0] == "goldenpickaxe":
            pickaxeName = "Altƒ±n Kazma"
            pickaxePrice = goldenPickaxePrice
            pickaxeId = "goldenpickaxe"
        elif self.values[0] == "reinforcedpickaxe":
            pickaxeName = "G√º√ßlendirilmi≈ü Kazma"
            pickaxePrice = reinforcedPickaxePrice
            pickaxeId = "reinforcedpickaxe"
        elif self.values[0] == "miningvehicle":
            pickaxeName = "Maden Aracƒ±"
            pickaxePrice = miningVehiclePrice
            pickaxeId = "mininigvehicle"

        # Database Connection
        db = client.mongoConnect["cupcake"]
        inventoryCollection = db["inventory"]
        coinCollection = db["economy"]

        # Inventory Check
        if await inventoryCollection.find_one({"_id" : interaction.user.id}) == None:
            newUserData = {
                "_id": interaction.user.id,
                "items" : {}
            }
            await inventoryCollection.insert_one(newUserData)

        # User Inventory (old)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        # Items Check
        if "items" not in userInventory:

            itemsData = { "$set" : {"items" : {}}}

            await inventoryCollection.update_one(userInventory, itemsData)

        # User Inventory (new)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        if self.values[0] == "sellpickaxe":
            if "pickaxe" in userInventory["items"]:
                
                userInventory["items"].pop("pickaxe")
                await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)
                await interaction.response.send_message(content = "Kazmanƒ± ba≈üarƒ±yla sattƒ±n")
            else:
                return await interaction.response.send_message(content = "Bir kazmaya sahip deƒüilsin!")

        # Wallet Check
        if await coinCollection.find_one({"_id" : interaction.user.id}) == None:
            return await interaction.response.send_message(content = "C√ºzdanƒ±n yok! `/wallet` komutunu kullan ve bir c√ºzdan olu≈ütur", ephemeral = True)

        # User Wallet
        userWallet = await coinCollection.find_one({"_id" : interaction.user.id})

        # Cupcoin (money) Check
        if userWallet["coins"] < pickaxePrice:
            needMoney = pickaxePrice - userWallet["coins"]
            return await interaction.response.send_message(content = f"C√ºzdanƒ±nƒ±zda yeteri kadar Cupcoin bulunmuyor! {needMoney:,} Cupcoin'e ihtiyacƒ±nƒ±z var.", ephemeral = True)



        # Pickaxe Check
        if "pickaxe" in userInventory["items"]:
            return await interaction.response.send_message("Zaten bir kazmanƒ±z var", ephemeral = True)

        # Fee received
        userWallet["coins"] -= pickaxePrice
        await coinCollection.replace_one({"_id" : interaction.user.id}, userWallet)

        # Add Item
        userInventory["items"].update({"pickaxe" : pickaxeId})
        await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)

        await interaction.response.send_message(f"‚ú®‚õèÔ∏è **|** {pickaxePrice:,} Cupcoin √∂deyerek yeni bir {pickaxeName} satƒ±n aldƒ±nƒ±z. Artƒ±k daha deƒüerli madenler √ßƒ±karabileceksiniz.")

class Swords(discord.ui.Select):
    def __init__(self):

        options = [
            discord.SelectOption(label='Claymore Kƒ±lƒ±cƒ±', value= "claymore", description=f' {claymorePrice:,} yerine sadece {claymoreDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),
            discord.SelectOption(label='Odachi Kƒ±lƒ±cƒ±', value= "odachi", description=f'{odachiPrice:,} yerine sadece {odachiDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),
            discord.SelectOption(label='Rapier Kƒ±lƒ±cƒ±', value= "rapier", description=f'{rapierPrice:,} yerine sadece {rapierDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),
            discord.SelectOption(label='Katana Kƒ±lƒ±cƒ±', value= "katana", description=f'{katanaPrice:,} yerine sadece {katanaDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),
            discord.SelectOption(label='Chukuto Kƒ±lƒ±cƒ±', value= "chokuto", description=f'{chukutoPrice:,} yerine sadece {chukutoDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),
            discord.SelectOption(label='Gladius Kƒ±lƒ±cƒ±', value= "gladius", description=f'{gladiusPrice:,} yerine sadece {gladiusDcPrice:,} Cupcoin', emoji='‚öîÔ∏è'),      

            discord.SelectOption(label='Kƒ±lƒ±cƒ±nƒ± Sat', value= "sellsword", description=f'Kƒ±lƒ±cƒ±nƒ± sat ve yenisini al', emoji='üóëÔ∏è')

        ]
        super().__init__(placeholder='Bir Kƒ±lƒ±√ß Se√ß', options=options)

    async def callback(self, interaction: discord.Interaction):
        
        swordName = ""
        swordPrice = 0
        swordId = ""
        
        if self.values[0] == "gladius":
            swordName = "Gladius Kƒ±lƒ±cƒ±"
            swordPrice = gladiusDcPrice
            swordId = "gladius"
        elif self.values[0] == "chokuto":
            swordName = "Chukuto Kƒ±lƒ±cƒ±"
            swordPrice = chukutoDcPrice
            swordId = "chokuto"
        elif self.values[0] == "katana":
            swordName = "Katana Kƒ±lƒ±cƒ±"
            swordPrice = katanaDcPrice
            swordId = "katana"
        elif self.values[0] == "rapier":
            swordName = "Rapier Kƒ±lƒ±cƒ±"
            swordPrice = rapierDcPrice
            swordId = "rapier"
        elif self.values[0] == "odachi":
            swordName = "Odachi Kƒ±lƒ±cƒ±"
            swordPrice = odachiDcPrice
            swordId = "odachi"
        elif self.values[0] == "claymore":
            swordName = "Claymore Kƒ±lƒ±cƒ±"
            swordPrice = claymoreDcPrice
            swordId = "claymore"

        # Database Connection
        db = client.mongoConnect["cupcake"]
        inventoryCollection = db["inventory"]
        coinCollection = db["economy"]
        
        # Inventory Check
        if await inventoryCollection.find_one({"_id" : interaction.user.id}) == None:
            newData = {
                "_id": interaction.user.id,
                "items" : {}
            }
            await inventoryCollection.insert_one(newData)
            
        # User Inventory (old)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})
            
        # Items Check
        if "items" not in userInventory:
            itemsData = { "$set" : {"items" : {}}}
            await inventoryCollection.update_one(userInventory, itemsData)

        # User Inventory (new)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        

        if self.values[0] == "sellsword":
            if "sword" in userInventory["items"]:
                
                userInventory["items"].pop("sword")
                await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)
                await interaction.response.send_message("Kƒ±lƒ±cƒ±nƒ± ba≈üarƒ±yla sattƒ±n")
            else:
                return await interaction.response.send_message("Bir kƒ±lƒ±ca sahip deƒüilsin")

        # Wallet Check
        if await coinCollection.find_one({"_id" : interaction.user.id}) == None:
            return await interaction.response.send_message("C√ºzdanƒ±n yok! `/wallet` komutunu kullan ve bir c√ºzdan olu≈ütur", ephemeral = True)

        # User Wallet
        userWallet = await coinCollection.find_one({"_id" : interaction.user.id})

        # Cupcoin (money) Check
        if userWallet["coins"] < swordPrice:
            needMoney = swordPrice - userWallet["coins"]
            return await interaction.response.send_message(f"C√ºzdanƒ±nƒ±zda yeteri kadar Cupcoin bulunmuyƒ±r! {needMoney:,} Cupcoin'e ihtiyacƒ±nƒ±z var", ephemeral = True)


        # Pickaxe Check
        if "sword" in userInventory["items"]:
            return await interaction.response.send_message("Zaten bir kƒ±lƒ±ca sahipsiniz", ephemeral = True)

        # Fee received
        userWallet["coins"] -= swordPrice
        await coinCollection.replace_one({"_id" : interaction.user.id}, userWallet)
        
        # Add Item
        userInventory["items"].update({"sword" : swordId})
        await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)

        await interaction.response.send_message(f"‚ú®‚öîÔ∏è **|** {swordPrice:,} Cupcoin √∂deyerek yeni bir {swordName} satƒ±n aldƒ±nƒ±z. Bir kƒ±lƒ±√ß almak √ßok akƒ±llƒ±ca! Gelecekte √ßok i≈ü yapacak.")

class Rods(discord.ui.Select):
    def __init__(self):

        options = [
            discord.SelectOption(label='Zƒ±pkƒ±n', value= "harpoon", description=f'√úcret: {harpoonPrice:,}', emoji='üé£'),
            discord.SelectOption(label='≈ûanslƒ± Olta', value= "luckyrod", description=f'√úcret: {luckyRodPrice:,}', emoji='üé£'),
            discord.SelectOption(label='G√ºm√º≈ü Olta', value= "silverrod", description=f'√úcret: {silverRodPrice:,}', emoji='üé£'),
            discord.SelectOption(label='Saƒülam Olta', value= "solidrod", description=f'√úcret: {solidRodPrice:,}', emoji='üé£'),
            discord.SelectOption(label='Basit Olta', value= "simplerod", description=f'√úcret: {simpleRodPrice:,}', emoji='üé£'),
            
            discord.SelectOption(label='Oltayƒ± Sat', value= "sellrod", description=f"Oltanƒ± sat ve yenisini al", emoji='üóëÔ∏è')

        ]
        super().__init__(placeholder='Bir Olta Se√ß', options=options)

    async def callback(self, interaction: discord.Interaction):
        
        rodName = ""
        rodPrice = 0
        rodId = ""
        
        if self.values[0] == "simplerod":
            rodName = "Basit Olta"
            rodPrice = simpleRodPrice
            rodId = "simplerod"
        
        elif self.values[0] == "solidrod":
            rodName = "Saƒülam Olta"
            rodPrice = solidRodPrice
            rodId = "solidrod"
        
        elif self.values[0] == "silverrod":
            rodName = "G√ºm√º≈ü Olta"
            rodPrice = silverRodPrice
            rodId = "silverrod"
        
        elif self.values[0] == "luckyrod":
            rodName = "≈ûanslƒ± Olta"
            rodPrice = luckyRodPrice
            rodId = "luckyrod"
        
        elif self.values[0] == "harpoon":
            rodName = "Zƒ±pkƒ±n"
            rodPrice = harpoonPrice
            rodId = "harpoon"


        # Database Connection
        db = client.mongoConnect["cupcake"]
        inventoryCollection = db["inventory"]
        coinCollection = db["economy"]
        
        # Inventory Check
        if await inventoryCollection.find_one({"_id" : interaction.user.id}) == None:
            newData = {
                "_id": interaction.user.id,
                "items" : {}
            }
            await inventoryCollection.insert_one(newData)

        # User Inventory (old)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})
        
        # Items Check
        if "items" not in userInventory:
            itemsData = { "$set" : {"items" : {}}}
            await inventoryCollection.update_one(userInventory, itemsData)

        # User Inventory (new)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        if self.values[0] == "sellrod":
            if "rod" in userInventory["items"]:
                userInventory["items"].pop("rod")
                await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)
                await interaction.response.send_message("Oltanƒ±zƒ± ba≈üarƒ±yla sattƒ±nƒ±z")
                return
            else:
                return await interaction.response.send_message("Zaten bir oltaya sahip deƒüilsiniz")
        # Wallet Check
        if await coinCollection.find_one({"_id" : interaction.user.id}) == None:
            return await interaction.response.send_message("C√ºzdanƒ±n yok! `/wallet` komutunu kullan ve bir c√ºzdan olu≈ütur", ephemeral = True)

        # User Wallet
        userWallet = await coinCollection.find_one({"_id" : interaction.user.id})

        # Cupcoin (money) Check
        if userWallet["coins"] < rodPrice:
            needMoney = rodPrice - userWallet["coins"] 
            return await interaction.response.send_message(f"C√ºzdanƒ±nƒ±zda yeteri kadar Cupcoin bulunmuyor! {needMoney:,} Cupcoin'e ihtiyacƒ±nƒ±z var", ephemeral = True)


        # Pickaxe Check
        if "rod" in userInventory["items"]:
            return await interaction.response.send_message("Zaten bir oltaya sahipsiniz", ephemeral = True)

        # Fee received
        userWallet["coins"] -= rodPrice
        await coinCollection.replace_one({"_id" : interaction.user.id}, userWallet)
        
        # Add Item
        userInventory["items"].update({"rod" : rodId})
        await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)

        await interaction.response.send_message(f"‚ú®üé£ **|** {rodPrice:,} √∂deyerek yeni bir {rodName} satƒ±n aldƒ±nƒ±z . Bu olta ile daha deƒüerli balƒ±klar tutabileceksiniz.")

class Bows(discord.ui.Select):
    def __init__(self):

        options = [
            discord.SelectOption(label='Arbalet', value= "crossbow", description=f'√úcret: {crossbowPrice:,}', emoji='üèπ'),
            discord.SelectOption(label='ƒ∞sabetli Yay', value= "accuratebow", description=f'√úcret: {accurateBowPrice:,}', emoji='üèπ'),
            discord.SelectOption(label='G√ºm√º≈ü Yay', value= "silverbow", description=f'√úcret: {silverBowPrice:,}', emoji='üèπ'),
            discord.SelectOption(label='Bakƒ±r Yay', value= "copperbow", description=f'√úcret: {copperBowPrice:,}', emoji='üèπ'),
            discord.SelectOption(label='Tahta Yay', value= "woodenbow", description=f'√úcret: {woodenBowPrice:,}', emoji='üèπ'),
            
            discord.SelectOption(label='Yayƒ± Sat', value= "sellbow", description=f"Yayƒ±nƒ± sat ve yenisini al", emoji='üóëÔ∏è')

        ]
        super().__init__(placeholder='Bir Yay Se√ß', options=options)

    async def callback(self, interaction: discord.Interaction):
        
        bowName = ""
        bowPrice = 0
        bowId = ""
        
        if self.values[0] == "woodenbow":
            bowName = "Tahta Yay"
            bowPrice = woodenBowPrice
            bowId = "woodenbow"
        
        elif self.values[0] == "copperbow":
            bowName = "Bakƒ±r Yay"
            bowPrice = copperBowPrice
            bowId = "copperbow"
        
        elif self.values[0] == "silverbow":
            bowName = "G√ºm√º≈ü Yay"
            bowPrice = silverBowPrice
            bowId = "silverbow"
        
        elif self.values[0] == "accuratebow":
            bowName = "ƒ∞sabetli Yay"
            bowPrice = accurateBowPrice
            bowId = "accuratebow"
        
        elif self.values[0] == "crossbow":
            bowName = "Arbalet"
            bowPrice = crossbowPrice
            bowId = "crossbow"


        # Database Connection
        db = client.mongoConnect["cupcake"]
        inventoryCollection = db["inventory"]
        coinCollection = db["economy"]
        
        # Inventory Check
        if await inventoryCollection.find_one({"_id" : interaction.user.id}) == None:
            newData = {
                "_id": interaction.user.id,
                "items" : {}
            }
            await inventoryCollection.insert_one(newData)

        # User Inventory (old)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})
        
        # Items Check
        if "items" not in userInventory:
            itemsData = { "$set" : {"items" : {}}}
            await inventoryCollection.update_one(userInventory, itemsData)

        # User Inventory (new)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        if self.values[0] == "sellbow":
            
            if "bow" in userInventory["items"]:
                
                userInventory["items"].pop("bow")
                await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)
                await interaction.response.send_message("Yayƒ±nƒ±zƒ± ba≈üarƒ±yla sattƒ±nƒ±z")
                return
            else:
                return await interaction.response.send_message("Zaten bir yaya sahip deƒüilsiniz")

        # Wallet Check
        if await coinCollection.find_one({"_id" : interaction.user.id}) == None:
            return await interaction.response.send_message("C√ºzdanƒ±n yok! `/wallet` komutunu kullan ve bir c√ºzdan olu≈ütur", ephemeral = True)

        # User Wallet
        userWallet = await coinCollection.find_one({"_id" : interaction.user.id})

        # Cupcoin (money) Check
        if userWallet["coins"] < bowPrice:
            needMoney = bowPrice - userWallet["coins"]
            return await interaction.response.send_message(f"C√ºzdanƒ±nda yeterli Cupcoin bulunmuyor! {needMoney:,} Cupcoin'e ihtiyacƒ±n var", ephemeral = True)


        # Pickaxe Check
        if "bow" in userInventory["items"]:
            return await interaction.response.send_message("Zaten bir yaya sahipsiniz", ephemeral = True)

        # Fee received
        userWallet["coins"] -= bowPrice
        await coinCollection.replace_one({"_id" : interaction.user.id}, userWallet)
        

        userInventory["items"].update({"bow" : bowId})
        await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)

        await interaction.response.send_message(f"‚ú®üèπ **|** {bowPrice:,} √∂deyerek yeni bir {bowName} satƒ±n aldƒ±nƒ±z. Artƒ±k daha deƒüerli avlar avlayabileceksiniz.")

class Axes(discord.ui.Select):
    def __init__(self):

        options = [
            discord.SelectOption(label='B√ºy√ºl√º Balta', value= "enchantedaxe", description=f'Price: {enchantedAxePrice:,}', emoji='ü™ì'),
            discord.SelectOption(label='G√º√ßlendirilmi≈ü Balta', value= "reinforcedaxe", description=f'Price: {reinforcedAxePrice:,}', emoji='ü™ì'),
            discord.SelectOption(label='Altƒ±n Balta', value= "goldenaxe", description=f'Price: {goldenAxePrice:,}', emoji='ü™ì'),
            discord.SelectOption(label='√áelik Balta', value= "steelaxe", description=f'Price: {steelAxePrice:,}', emoji='ü™ì'),
            discord.SelectOption(label='Ta≈ü Balta', value= "stoneaxe", description=f'Price: {stoneAxePrice:,}', emoji='ü™ì'),
            
            
            
            
            
            discord.SelectOption(label='Baltanƒ± Sata', value= "sellaxe", description=f"Baltanƒ± sat ve yenisini al", emoji='üóëÔ∏è')

        ]
        super().__init__(placeholder='Bir Balta Se√ß', options=options)

    async def callback(self, interaction: discord.Interaction):
        
        axeName = ""
        axePrice = 0
        axeId = ""
        
        if self.values[0] == "stoneaxe":
            axeName = "Ta≈ü Balta"
            axePrice = stoneAxePrice
            axeId = "stoneaxe"
        
        elif self.values[0] == "steelaxe":
            axeName = "√áelik Balta"
            axePrice = steelAxePrice
            axeId = "steelaxe"
        
        elif self.values[0] == "goldenaxe":
            axeName = "Altƒ±n Balta"
            axePrice = goldenAxePrice
            axeId = "goldenaxe"
        
        elif self.values[0] == "reinforcedaxe":
            axeName = "G√º√ßlendirilmi≈ü Balta"
            axePrice = reinforcedAxePrice
            axeId = "reinforcedaxe"
        
        elif self.values[0] == "enchantedaxe":
            axeName = "B√ºy√ºl√º Balta"
            axePrice = enchantedAxePrice
            axeId = "enchantedaxe"


        # Database Connection
        db = client.mongoConnect["cupcake"]
        inventoryCollection = db["inventory"]
        coinCollection = db["economy"]
        
        # Inventory Check
        if await inventoryCollection.find_one({"_id" : interaction.user.id}) == None:
            newData = {
                "_id": interaction.user.id,
                "items" : {}
            }
            await inventoryCollection.insert_one(newData)

        # User Inventory (old)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})
        
        # Items Check
        if "items" not in userInventory:
            itemsData = { "$set" : {"items" : {}}}
            await inventoryCollection.update_one(userInventory, itemsData)

        # User Inventory (new)
        userInventory = await inventoryCollection.find_one({"_id": interaction.user.id})

        if self.values[0] == "sellaxe":
            if "axe" in userInventory["items"]:
                
                userInventory["items"].pop("axe")
                await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)
                await interaction.response.send_message("Baltanƒ± ba≈üarƒ±yla sattƒ±n")
                return
            else:
                return await interaction.response.send_message("Zaten bir baltaya sahip deƒüilsin")

        # Wallet Check
        if await coinCollection.find_one({"_id" : interaction.user.id}) == None:
            return await interaction.response.send_message("C√ºzdanƒ±n yok! `/wallet` komutunu kullan ve bir c√ºzdan olu≈ütur", ephemeral = True)

        # User Wallet
        userWallet = await coinCollection.find_one({"_id" : interaction.user.id})

        # Cupcoin (money) Check
        if userWallet["coins"] < axePrice:
            needMoney = axePrice - userWallet["coins"]
            return await interaction.response.send_message(f"C√ºzdanƒ±nda yeteri kadar Cupcoin bulunamadƒ±! {needMoney:,} Cupcoin'e ihtiyacƒ±nƒ±z var", ephemeral = True)


        # Pickaxe Check
        if "axe" in userInventory["items"]:
            return await interaction.response.send_message("Zaten bir baltaya sahipsiniz", ephemeral = True)

        # Fee received
        userWallet["coins"] -= axePrice
        await coinCollection.replace_one({"_id" : interaction.user.id}, userWallet)
        
        # Add Item
        userInventory["items"].update({"axe" : axeId})
        await inventoryCollection.replace_one({"_id" : interaction.user.id}, userInventory)

        await interaction.response.send_message(f"‚ú®ü™ì **|** {axePrice:,} √∂deyerek yeni bir {axeName} satƒ±n aldƒ±nƒ±z. Artƒ±k daha b√ºy√ºk ve deƒüerli aƒüa√ßlarƒ± kesebileceksiniz.")

class PickaxeView(discord.ui.View):
    def __init__(self):
        super().__init__()

        # Adds the dropdown to our view object.
        self.add_item(Pickaxes())
        
class SwordView(discord.ui.View):
    def __init__(self):
        super().__init__()
        
        self.add_item(Swords())

class RodView(discord.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Rods())

class BowView(discord.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Bows())

class AxeView(discord.ui.View):
    def __init__(self):
        super().__init__()

        self.add_item(Axes())
        

    


# BASIC ITEMS CLASS
class ItemsView(View):

    # THIS BUTTON PURPOSE IS SHOW ALL PICKAXES
    @discord.ui.button(label="Kazmalar", style=discord.ButtonStyle.primary, custom_id="showpickaxes")
    async def pickaxe_callback(self, interaction, button):
        
        view = PickaxeView()

        await interaction.response.send_message(content= "Yeni bir kazma mƒ± alacaksƒ±n? Bu harika! A≈üaƒüƒ±daki men√ºden kazmalarƒ± g√∂r√ºnt√ºleyebilirsin.", view = view)
    
    # THIS BUTTON PURPOSE IS SHOW ALL RODS
    @discord.ui.button(label="Oltalar", style=discord.ButtonStyle.primary, custom_id="showrods")
    async def rods_callback(self, interaction, button):
        view = RodView()
        await interaction.response.send_message(content= "Yeni bir olta mƒ± alacaksƒ±n? Bu harika! A≈üaƒüƒ±daki men√ºden oltalarƒ± g√∂r√ºnt√ºleyebilirsin.", view = view)

    # THIS BUTTON PURPOSE IS SHOW ALL BOWS
    @discord.ui.button(label="Yaylar", style=discord.ButtonStyle.primary, custom_id="showbows")
    async def bows_callback(self, interaction, button):
        view = BowView()
        await interaction.response.send_message(content= "Yeni bir yay mƒ± alacaksƒ±n? Bu harika! A≈üaƒüƒ±daki men√ºden yaylarƒ± g√∂r√ºnt√ºleyebilirsin.", view = view)
    

    # THIS BUTTON PURPOSE IS SHOW ALL AXES
    @discord.ui.button(label="Baltalar", style=discord.ButtonStyle.primary, custom_id="showaxes")
    async def axes_callback(self, interaction, button):
        view = AxeView()
        await interaction.response.send_message(content= "Yeni bir balta mƒ± alacaksƒ±n? Bu harika! A≈üaƒüƒ±daki men√ºden baltalarƒ± g√∂r√ºnt√ºleyebilirsin.", view = view)

     # THIS BUTTON PURPOSE IS SHOW ALL SWORDS
    @discord.ui.button(label="Kƒ±lƒ±√ßlar", style=discord.ButtonStyle.success, custom_id="showswords")
    async def sword_callback(self, interaction, button):
        view = SwordView()
        await interaction.response.send_message(content= "Yeni bir kƒ±lƒ±√ß mƒ± alacaksƒ±n? Bu harika! A≈üaƒüƒ±daki men√ºden kƒ±lƒ±√ßlarƒ± g√∂r√ºnt√ºleyebilirsin.", view = view)


    # THIS BUTTON PURPOSE IS CLOSE THE MENU
    @discord.ui.button(label="Kapat", style=discord.ButtonStyle.danger, custom_id="closemenu")
    async def close_callback(self, interaction, button):
        await interaction.message.delete()
        await interaction.response.send_message(content=f"Maƒüaza ba≈üarƒ±yla kapatƒ±ldƒ±.", ephemeral = True)
    

# MAIN CLASS
class Store(commands.Cog, commands.Bot):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name = "store", description = "Maƒüazayƒ± a√ß ve e≈üya satƒ±n al!") # Commands
    @app_commands.guild_only
    @app_commands.checks.cooldown( 1, 20, key=lambda i: (i.guild_id, i.user.id)) # Cooldown
    async def store(self, interaction: discord.Interaction):
        
        view = ItemsView()

        itemsEmbed = Embed(description = f"Merhaba üëã Maƒüazaya ho≈ü geldin. Balƒ±k√ßƒ±lƒ±k, avcƒ±lƒ±k, madencilik ve ormancƒ±lƒ±k i√ßin buradan ekipman satƒ±n alabilirsin. ")
        itemsEmbed.set_author(name = interaction.user.name, icon_url = interaction.user.avatar.url)
        itemsEmbed.add_field(name = "Nasƒ±l E≈üya Satƒ±n Alacaƒüƒ±m?", value = "Butonlara tƒ±klayƒ±n ve seviyelere g√∂re e≈üya satƒ±n alƒ±nƒ±z", inline = False)
        itemsEmbed.add_field(name = "Bunun i√ßin √∂deme yapacak mƒ±yƒ±m?", value = "Evet, e≈üyalara ve onlarƒ±n seviyelerine g√∂re farklƒ± √ºcretlendirmeler bulunuyor (Cupcoin ile)", inline = False)

        await interaction.response.send_message(embed = itemsEmbed, view = view) 

    @store.error
    async def storeError(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        if isinstance(error, app_commands.CommandOnCooldown):
            timeRemaining = str(datetime.timedelta(seconds=int(error.retry_after)))
            await interaction.response.send_message(f"L√ºtfen `{timeRemaining}`s bekleyin!",ephemeral=True)
        else:
            print(f"[STORE]: {error} ")

async def setup(bot: commands.Bot):
    await bot.add_cog(Store(bot))